{"version":3,"file":"async-Settings.js","mappings":"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","sources":["webpack://viasp_dash/./node_modules/dom-helpers/esm/removeClass.js","webpack://viasp_dash/./node_modules/react-transition-group/esm/CSSTransition.js","webpack://viasp_dash/./node_modules/dom-helpers/esm/addClass.js","webpack://viasp_dash/./node_modules/dom-helpers/esm/hasClass.js","webpack://viasp_dash/./src/lib/fragments/Settings.style.js","webpack://viasp_dash/./src/lib/fragments/Search.style.js","webpack://viasp_dash/./src/lib/fragments/NavigationArea.react.js","webpack://viasp_dash/./src/lib/fragments/SearchResult.react.js","webpack://viasp_dash/./src/lib/fragments/Search.react.js","webpack://viasp_dash/./src/lib/fragments/Settings.react.js"],"sourcesContent":["function replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n/**\n * Removes a CSS class from a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\nimport { forceReflow } from './utils/reflow';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      if (node) forceReflow(node);\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","import hasClass from './hasClass';\n/**\n * Adds a CSS class to a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","/**\n * Checks if a given element has a CSS class.\n * \n * @param element the element\n * @param className the CSS class name\n */\nexport default function hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}","import {styled} from 'styled-components';\nimport {darken} from 'polished';\nimport {Constants} from '../constants';\n\nexport const SettingsDiv = styled.div`\n    white-space: nowrap;\n    float: right;\n    display: flow-root;\n    position: absolute;\n    z-index: 10;\n    right: 0;\n    top: 0;\n    margin-right: 1em;\n    margin-top: 1.2em;\n    /* width: 10%; */\n    max-width: 40em;\n    min-width: 7em;\n`;\n\nexport const ClearMarkedDiv = styled.div`\n    display: flex;\n    justify-content: end;\n`;\n\nexport const ClearMarkedSpan = styled.span`\n    background: ${({$colorPalette}) => $colorPalette.primary};\n    color: ${({$colorPalette}) => $colorPalette.light};\n    padding: 0.7em 0.9em;\n    font-family: monospace;\n    border-radius: 0.7em;\n    z-index: 20;\n    cursor: pointer;\n\n    &:hover {\n        background: ${({$colorPalette}) =>\n            darken(Constants.hoverColorDarkenFactor, $colorPalette.primary)};\n    }\n\n    &:active {\n        background: ${({$colorPalette}) => $colorPalette.infoBackground};\n    }\n\n    &.fade-enter {\n        opacity: 0;\n    }\n    &.fade-enter-active {\n        opacity: 1;\n        transition: opacity 0.8s;\n    }\n    &.fade-exit {\n        opacity: 1;\n    }\n    &.fade-exit-active {\n        opacity: 0;\n        transition: opacity 0.8s;\n    }\n`;\n\nexport const DrawerDiv = styled.div`\n    font-family: sans-serif;\n    height: fit-content;\n`;\n\nexport const DrawerContentDiv = styled.div`\n    max-width: 500px;\n    padding-top: 0.1em;\n    padding-bottom: 0.1em;\n`;","import {styled} from 'styled-components';\nimport {darken} from 'polished';\nimport {Constants} from '../constants';\n\nexport const SearchInput = styled.input`\n    color: ${(props) => props.$colorPalette.light};\n    background-color: ${({$colorPalette}) =>\n            $colorPalette.primary};\n\n    width: 100%;\n    border-radius: 0.4em;\n    padding: 0.7em 3em 0.7em 0.8em;\n    border: 0px;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:hover {\n        background-color: ${({$colorPalette}) =>\n            darken(Constants.hoverColorDarkenFactor, $colorPalette.primary)};\n    }\n`;\n\nexport const SearchInputContainerDiv = styled.div`\n    justify-content: end;\n    align-items: center;\n    display: flex;\n`;\n\nexport const SearchBarDiv = styled.div`\n    width: ${(props) => props.$inputWidth}em;\n    max-width: 90vw;\n    position: relative;\n`;\n\nexport const SearchDiv = styled.div`\n    display: flex;\n    justify-content: end;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {styled} from 'styled-components';\nimport IconWrapper from './IconWrapper.react';\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\nimport {colorPaletteState} from '../atoms/settingsState';\nimport {\n    symbolSearchHighlightsState,\n} from '../atoms/highlightsState';\nimport {\n    selectedBranchState,\n} from '../atoms/searchState';\n\nconst NavigationAreaDiv = styled.div`\n    color: ${(props) => props.$colorPalette.light};\n    border-radius: 0.4em;\n    position: absolute;\n    right: 0;\n    margin-right: 0.4em;\n    display: ${(props) => (props.$visible ? 'flex' : 'none')};\n`;\n\nfunction NextButton(props) {\n    const {onForward, disabled} = props;\n    const colorPalette = useRecoilValue(colorPaletteState);\n\n    return (\n        <IconWrapper\n            icon=\"navigateNext\"\n            height=\"25px\"\n            color={colorPalette.light}\n            onClick={disabled ? null : onForward}\n        />\n    );\n}\n\nNextButton.propTypes = {\n    /**\n     * The function to call when the forward button is clicked.\n     * */\n    onForward: PropTypes.func,\n    /**\n     * Whether the forward button is disabled.\n     * */\n    disabled: PropTypes.bool,\n};\n\nfunction PrevButton(props) {\n    const {onBackward, disabled} = props;\n    const colorPalette = useRecoilValue(colorPaletteState);\n\n    return (\n        <IconWrapper\n            icon=\"navigateNext\"\n            height=\"25px\"\n            flip=\"horizontal\"\n            color={colorPalette.light}\n            onClick={disabled ? null : onBackward}\n        />\n    );\n}\n\nPrevButton.propTypes = {\n    /**\n     * The function to call when the backward button is clicked.\n     * */\n    onBackward: PropTypes.func,\n    /**\n     * Whether the backward button is disabled.\n     * */\n    disabled: PropTypes.bool,\n};\n\nexport function NavigationArea(props) {\n    const {visible, searchInputAreaRef} = props;\n    const colorPalette = useRecoilValue(colorPaletteState);\n    const searchResultRecoilHighlights = useRecoilValue(\n        symbolSearchHighlightsState\n    );\n    const setSelectedBranch = useSetRecoilState(selectedBranchState);\n\n    if (searchResultRecoilHighlights.length === 0) {\n        return null;\n    }\n\n    function onClose() {\n        searchInputAreaRef?.current.focus();\n    }\n\n    function onRotate(direction) {\n        setSelectedBranch(\n            (selectedBranch) =>\n                (searchResultRecoilHighlights[0].includes.length + selectedBranch +\n                    direction) %\n                searchResultRecoilHighlights[0].includes.length\n        );\n        searchInputAreaRef?.current.focus();\n    }\n\n    return (\n        <NavigationAreaDiv\n            className=\"txt-elem\"\n            $colorPalette={colorPalette}\n            $visible={visible}\n        >\n            <PrevButton\n                onBackward={() => {\n                    onRotate(-1);\n                }}\n                // disabled={selected < 1}\n                disabled={searchResultRecoilHighlights[0].includes.length < 2}\n            />\n            <NextButton\n                onForward={() => {\n                    onRotate(+1);\n                }}\n                // disabled={selected + 1 >= includesLength}\n                disabled={searchResultRecoilHighlights[0].includes.length < 2}\n            />\n            {/* <CloseButton onClose={onClose} /> */}\n        </NavigationAreaDiv>\n    );\n}\n\nNavigationArea.propTypes = {\n    /**\n     * Whether the navigation area should be visible.\n     * */\n    visible: PropTypes.bool,\n    /**\n     * The reference to the search input element.\n     * */\n    searchInputAreaRef: PropTypes.object,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {styled} from 'styled-components';\nimport {\n    NODE,\n    SIGNATURE,\n    TRANSFORMATION,\n    SYMBOLHIGHLIGHTS_RECOIL,\n} from '../types/propTypes';\nimport {darken, lighten} from 'polished';\nimport { Constants } from \"../constants\";\nimport {NavigationArea} from './NavigationArea.react';\n\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\nimport {colorPaletteState} from '../atoms/settingsState';\nimport {\n    filteredSuggestionsState,\n    showSuggestionsState,\n    isAutocompleteVisibleState,\n    activeSuggestionState,\n    selectedSuggestionState,\n} from '../atoms/searchState';\n\nconst SuggestionTextSpan = styled.span`\n    margin-left: 0.8em;\n    padding-right: 3em;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    direction: rtl;\n    text-align: left;\n`;\n\nfunction SuggestionContent(props) {\n    const {value} = props;\n    const display = value.repr;\n\n    return (\n        <SuggestionTextSpan className=\"txt-elem\">{display}</SuggestionTextSpan>\n    );\n}\n\nSuggestionContent.propTypes = {\n    /**\n     * The Search Result to be displayed, either a Transformation, a Node or a Signature\n     */\n    value: SYMBOLHIGHLIGHTS_RECOIL,\n};\n\nconst SearchRowLi = styled.li`\n    background-color: ${(props) => props.$backgroundColor};\n    padding: 0.7em 0;\n    justify-content: begin;\n    align-items: center;\n    display: flex;\n\n    &.active {\n        background-color: ${(props) =>\n            darken(Constants.hoverColorDarkenFactor, props.$backgroundColor)};\n    }\n`;\n\nconst ActiveSearchResultDiv = styled.div`\n    position: relative;\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    align-items: center;\n    height: 100%;\n    padding-right: 3em;\n`;\n\nconst ResultsListUL = styled.ul`\n    list-style: none;\n    right: 0;\n    left: 0;\n    margin-top: 0;\n    margin-left: 0;\n    padding-left: 0em;\n    padding-right: 0em;\n    margin-bottom: 1px;\n    border-radius: 0.7em;\n    overflow-x: hidden;\n    overflow-y: auto;\n    max-height: ${(props) => (props.$isVisible ? '8em' : '0')};\n    transition: max-height 0.3s ease-out;\n    -ms-overflow-style: none; /* Internet Explorer 10+ */\n    scrollbar-width: none; /* Firefox */\n    &::-webkit-scrollbar {\n        /* Safari and Chrome */\n        display: none;\n    }\n`;\n\n\nconst AutocompleteResultsUL = styled(ResultsListUL)`\n    background-color: ${(props) =>\n        lighten(\n            Constants.hoverColorLightenFactor,\n            props.$colorPalette.primary\n        )};\n    color: ${(props) => props.$colorPalette.light};\n`;\n\nconst SearchResultsUL = styled(ResultsListUL)`\n    background-color: ${(props) => props.$colorPalette.primary};\n    color: ${(props) => props.$colorPalette.light};\n`;\n\nexport function SearchResultSuggestionsList(props) {\n    const {select} = props;\n    const filteredSuggestions = useRecoilValue(filteredSuggestionsState);\n    const isAutocompleteVisible = useRecoilValue(isAutocompleteVisibleState);\n    const colorPalette = useRecoilValue(colorPaletteState);\n    const showSuggestions = useRecoilValue(showSuggestionsState);\n    const setActiveSuggestion = useSetRecoilState(activeSuggestionState);\n    const selectedSuggestion = useRecoilValue(selectedSuggestionState);\n\n    if (!filteredSuggestions.length) {\n        return (\n            <SearchResultsUL\n                className=\"results-list\"\n                $colorPalette={colorPalette}\n                $isVisible={false}\n            />\n        );\n    }\n    if (isAutocompleteVisible) {\n        return (\n            <AutocompleteResultsUL\n                className=\"results-list\"\n                $colorPalette={colorPalette}\n                $isVisible={showSuggestions}\n            >\n                {filteredSuggestions.map((suggestion, index) => {\n                    return (\n                        <Suggestion\n                            key={index}\n                            index={index}\n                            value={suggestion}\n                            select={() => {select(index)}}\n                            mouseHoverCallback={() =>\n                                setActiveSuggestion(index)\n                            }\n                            isAutocompleteSuggestion\n                        />\n                    );\n                })}\n            </AutocompleteResultsUL>\n        );\n    }\n    return (\n        <SearchResultsUL\n            className=\"results-list\"\n            $colorPalette={colorPalette}\n            $isVisible={showSuggestions}\n        >\n            {filteredSuggestions.map((suggestion, index) => (\n                <Suggestion\n                        key={index}\n                        index={index}\n                        value={suggestion}\n                        select={() => {\n                            select(index);\n                        }}\n                        mouseHoverCallback={() => setActiveSuggestion(index)}\n                        isAutocompleteSuggestion={false}\n                        isSelectedResult={selectedSuggestion === index}\n                    />\n            ))}\n        </SearchResultsUL>\n    );\n}\n\nSearchResultSuggestionsList.propTypes = {\n    /**\n     * onClick Callback\n     */\n    select: PropTypes.func,\n};\n\nexport function Suggestion(props) {\n    const {\n        value,\n        index,\n        select,\n        mouseHoverCallback,\n        isAutocompleteSuggestion,\n        isSelectedResult,\n    } = props;\n    const colorPalette = useRecoilValue(colorPaletteState);\n    const activeSuggestion = useRecoilValue(activeSuggestionState);\n    const SearchRowRef = React.useRef(null);\n\n    const classes = ['search_row'];\n    if (index === activeSuggestion) {\n        classes.push('active');\n    }\n\n\n    React.useEffect(() => {\n        if (index === activeSuggestion) {\n            SearchRowRef.current.scrollIntoView({\n                behavior: 'smooth',\n                block: 'nearest',\n            });\n        }\n    }, [activeSuggestion, index]);\n\n\n    return (\n        <SearchRowLi\n            className={classes.join(' ')}\n            name={value.repr}\n            $backgroundColor={\n                isAutocompleteSuggestion\n                    ? lighten(\n                          Constants.hoverColorLightenFactor,\n                          colorPalette.primary\n                      )\n                    : colorPalette.primary\n            }\n            ref={SearchRowRef}\n            onMouseEnter={mouseHoverCallback}\n            onClick={isSelectedResult ? null : () => select(value)}\n        >\n            {!isSelectedResult ? (\n                <SuggestionContent value={value} />\n            ) : (\n                <ActiveSearchResultDiv className=\"active_search_result\">\n                    <SuggestionContent value={value} />\n                    <NavigationArea\n                        className=\"navigation_area\"\n                        visible={true}\n                        searchInputAreaRef={null}\n                    />\n                </ActiveSearchResultDiv>\n            )}\n        </SearchRowLi>\n    );\n};\n\nSuggestion.propTypes = {\n    /**\n     * The Search Result to be displayed, either a Transformation, a Node or a Signature\n     */\n    value: PropTypes.oneOfType([\n        SIGNATURE,\n        TRANSFORMATION,\n        NODE,\n        SYMBOLHIGHLIGHTS_RECOIL,\n    ]),\n    /**\n     *  Index of the Suggestion in the Search Results\n     */\n    index: PropTypes.number,\n    /**\n     *  onClick Callback\n     */\n    select: PropTypes.func,\n    /**\n     *  onMouseHover Callback\n     */\n    mouseHoverCallback: PropTypes.func,\n    /**\n     *  Is autocomplete\n     */\n    isAutocompleteSuggestion: PropTypes.bool,\n    /**\n     *  Is selected result\n     */\n    isSelectedResult: PropTypes.bool,\n};\n","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport PulseLoader from 'react-spinners/PulseLoader';\nimport {\n    SearchDiv,\n    SearchBarDiv,\n    SearchInputContainerDiv,\n    SearchInput,\n} from './Search.style';\nimport { Constants } from \"../constants\";\nimport { pixelToEm } from '../utils';\nimport { NavigationArea } from './NavigationArea.react';\nimport {SearchResultSuggestionsList} from './SearchResult.react';\nimport { useRecoilState, useRecoilValue, useRecoilCallback, useResetRecoilState } from 'recoil';\nimport {symbolSearchHighlightsState} from '../atoms/highlightsState';\nimport {handleSearchResultSuggestionsCallback} from '../hooks/highlights';\nimport { colorPaletteState } from '../atoms/settingsState';\nimport {\n    searchInputState,\n    filteredSuggestionsState,\n    awaitingInputState,\n    activeSuggestionState,\n    selectedSuggestionState,\n    selectedBranchState,\n} from '../atoms/searchState';\nimport { currentSortState } from '../atoms/currentGraphState';\n\nfunction calculateTextWidth(text) {\n    const span = document.createElement('span');\n    span.style.visibility = 'hidden';\n    span.style.whiteSpace = 'pre';\n    span.style.position = 'absolute';\n    span.style.padding = '0.7em 3em 0.7em 0.8em';\n    span.textContent = text;\n    document.body.appendChild(span);\n    const width = span.offsetWidth;\n    document.body.removeChild(span);\n    return width;\n}\n\nfunction SearchInputComponent(props) {\n    const {\n        searchInputRef,\n        onChange,\n        onKeyDown,\n        inputWidth,\n    } = props;\n    const colorPalette = useRecoilValue(colorPaletteState);\n\n    const awaitingInput = useRecoilValue(awaitingInputState);\n    const userInput = useRecoilValue(searchInputState);\n    const searchResultHighlights = useRecoilValue(\n        symbolSearchHighlightsState\n    );\n\n    useEffect(() => {\n        searchInputRef.current.focus();\n    }, [searchInputRef, userInput]);\n\n    return (\n        <SearchInputContainerDiv className=\"search_input_container\">\n            <SearchInput\n                className=\"txt-elem\"\n                ref={searchInputRef}\n                onChange={onChange}\n                onKeyDown={onKeyDown}\n                value={userInput}\n                $colorPalette={colorPalette}\n                $inputWidth={inputWidth}\n                placeholder=\"query\"\n                type=\"text\"\n            />\n            <PulseLoader\n                color={colorPalette.light}\n                loading={awaitingInput}\n                cssOverride={{\n                    position: 'absolute',\n                    marginRight: '0.8em',\n                }}\n                size={'0.25em'}\n                speedMultiplier={Constants.awaitingInputSpinnerSpeed}\n            />\n            <NavigationArea\n                visible={\n                    searchResultHighlights.length > 0 &&\n                    searchResultHighlights.some((s) => s.isAutocomplete)\n                }\n                searchInputAreaRef={searchInputRef}\n            />\n        </SearchInputContainerDiv>\n    );\n}\n\nSearchInputComponent.propTypes = {\n    searchInputRef: PropTypes.object,\n    onChange: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    inputWidth: PropTypes.number,\n};\n\n\n\nexport function Search() {\n    const [activeSuggestion, setActiveSuggestion] = useRecoilState(activeSuggestionState);\n    const filteredSuggestions = useRecoilValue(filteredSuggestionsState);\n    const [searchInput, setSearchInput] = useRecoilState(searchInputState);\n    const inputWidth = useRef(Constants.minSearchInputWidthInEm);\n    const searchInputRef = useRef(null);\n    const handleSearchResultSuggestions = useRecoilCallback(\n        handleSearchResultSuggestionsCallback, []\n    );\n    const [selectedSuggestion, setSelectedSuggestion] = useRecoilState(selectedSuggestionState);\n    const currentSort = useRecoilValue(currentSortState);\n    const resetSelectedBranch = useResetRecoilState(selectedBranchState)\n    const selectedBranch = useRecoilValue(selectedBranchState);\n\n\n\n    function onChange(e) {\n        const userInput = e.currentTarget.value;\n        setSearchInput(userInput);\n    }\n\n    function select(searchResultSuggestion) {\n        setSelectedSuggestion(searchResultSuggestion);\n    }\n\n    useEffect(() => {\n        setSelectedSuggestion(null);\n        resetSelectedBranch();\n        handleSearchResultSuggestions();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [searchInput]);\n\n    useEffect(() => {\n        resetSelectedBranch();\n        handleSearchResultSuggestions();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedSuggestion]);\n\n    useEffect(() => {\n        handleSearchResultSuggestions();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentSort, selectedBranch]);\n\n    function onKeyDown(e) {\n        if (e.keyCode === Constants.KEY_ENTER) {\n            select(activeSuggestion);\n        } else if (e.keyCode === Constants.KEY_UP) {\n            e.preventDefault();\n            if (activeSuggestion === -1) {\n                return;\n            }\n            setActiveSuggestion(activeSuggestion - 1);\n        } else if (e.keyCode === Constants.KEY_DOWN) {\n            if (activeSuggestion + 1 === filteredSuggestions.length) {\n                return;\n            }\n            setActiveSuggestion(activeSuggestion + 1);\n        }\n    }\n\n    // calculate Width of search input\n    useEffect(() => {\n        const calculateWidth = () => {\n            const inputWidthCalculated = calculateTextWidth(searchInput);\n            const suggestionsWidth = filteredSuggestions.reduce(\n                (maxWidth, suggestion) => {\n                    const suggestionWidth = calculateTextWidth(suggestion.repr);\n                    return Math.max(maxWidth, suggestionWidth);\n                },\n                0\n            );\n            const newWidth =\n                pixelToEm(Math.max(inputWidthCalculated, suggestionsWidth)) + 2;\n            inputWidth.current = Math.min(\n                    Math.max(newWidth, Constants.minSearchInputWidthInEm),\n                    Constants.maxSearchInputWidthInEm\n                );\n        };\n\n        calculateWidth();\n    }, [searchInput, filteredSuggestions]);\n\n    \n    return (\n        <SearchDiv className=\"search\">\n            <SearchBarDiv className=\"search_bar\" $inputWidth={inputWidth.current}>\n                <SearchInputComponent\n                    searchInputRef={searchInputRef}\n                    onChange={onChange}\n                    onKeyDown={onKeyDown}\n                    inputWidth={inputWidth.current}\n                />\n                {searchInput !== '' ? <SearchResultSuggestionsList \n                    select={select}/> : null}\n            </SearchBarDiv>\n        </SearchDiv>\n    );\n}\n\nSearch.propTypes = {};\n","import React, { Suspense } from 'react';\nimport {CSSTransition} from 'react-transition-group';\nimport {\n    SettingsDiv,\n    ClearMarkedDiv,\n    ClearMarkedSpan,\n    DrawerDiv,\n    DrawerContentDiv,\n} from './Settings.style';\nimport {Search} from './Search.react';\n\nimport {useRecoilValue, useSetRecoilState, useRecoilCallback} from 'recoil';\nimport { colorPaletteState } from '../atoms/settingsState';\nimport {allHighlightedSymbolsState} from '../atoms/highlightsState';\nimport {clearAllHighlightsCallback} from '../hooks/highlights';\nimport { searchInputState } from '../atoms/searchState';\n\nfunction ClearMarked() {\n    const setSearchUserInput = useSetRecoilState(searchInputState);\n    const recoilHighlightedSymbols = useRecoilValue(allHighlightedSymbolsState);\n    const clearHighlights = useRecoilCallback(clearAllHighlightsCallback, []);\n    const colorPalette = useRecoilValue(colorPaletteState);\n\n    function onClick() {\n        setSearchUserInput('');\n        clearHighlights();\n    }\n\n    return (\n        <ClearMarkedDiv className=\"clear_marked\">\n            <CSSTransition\n                in={recoilHighlightedSymbols.length > 0}\n                timeout={800}\n                classNames=\"fade\"\n                mountOnEnter\n                unmountOnExit\n            >\n                <ClearMarkedSpan\n                    className=\"txt-elem noselect unselected\"\n                    onClick={onClick}\n                    $colorPalette={colorPalette}\n                >\n                    clear\n                </ClearMarkedSpan>\n            </CSSTransition>\n        </ClearMarkedDiv>\n    );\n}\n\nexport default function Settings() {\n    return (\n        <SettingsDiv className=\"settings noselect\">\n            <DrawerDiv>\n                <DrawerContentDiv>\n                    <Suspense fallback={null}>\n                        <Search />\n                    </Suspense>\n                </DrawerContentDiv>\n                <DrawerContentDiv>\n                    <ClearMarked />\n                </DrawerContentDiv>\n            </DrawerDiv>\n        </SettingsDiv>\n    );\n}\n"],"names":["replaceClassName","origClass","classToRemove","replace","RegExp","removeClass","node","classes","split","forEach","c","className","element","classList","remove","setAttribute","baseVal","CSSTransition","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","appliedClasses","appear","enter","exit","onEnter","maybeNode","maybeAppearing","_this$resolveArgument","resolveArguments","appearing","removeClasses","addClass","props","onEntering","_this$resolveArgument2","type","onEntered","_this$resolveArgument3","onExit","onExiting","onExited","nodeRef","current","getClassNames","classNames","isStringClassNames","baseClassName","activeClassName","doneClassName","_proto","prototype","phase","add","contains","indexOf","hasClass","_addClass","_this$appliedClasses$","base","active","done","render","_this$props","Transition","defaultProps","propTypes","SettingsDiv","styled","div","_templateObject","_taggedTemplateLiteral","ClearMarkedDiv","_templateObject2","ClearMarkedSpan","span","_templateObject3","_ref","$colorPalette","primary","_ref2","light","_ref3","darken","Constants","hoverColorDarkenFactor","_ref4","infoBackground","DrawerDiv","_templateObject4","DrawerContentDiv","_templateObject5","SearchInput","input","SearchInputContainerDiv","SearchBarDiv","$inputWidth","SearchDiv","NavigationAreaDiv","$visible","NextButton","onForward","disabled","colorPalette","useRecoilValue","colorPaletteState","React","IconWrapper","icon","height","color","onClick","PrevButton","onBackward","flip","NavigationArea","visible","searchInputAreaRef","searchResultRecoilHighlights","symbolSearchHighlightsState","setSelectedBranch","useSetRecoilState","selectedBranchState","onRotate","direction","selectedBranch","includes","focus","PropTypes","SuggestionTextSpan","SuggestionContent","display","value","repr","SYMBOLHIGHLIGHTS_RECOIL","SearchRowLi","li","$backgroundColor","ActiveSearchResultDiv","ResultsListUL","ul","$isVisible","AutocompleteResultsUL","lighten","hoverColorLightenFactor","SearchResultsUL","_templateObject6","SearchResultSuggestionsList","select","filteredSuggestions","filteredSuggestionsState","isAutocompleteVisible","isAutocompleteVisibleState","showSuggestions","showSuggestionsState","setActiveSuggestion","activeSuggestionState","selectedSuggestion","selectedSuggestionState","map","suggestion","index","Suggestion","key","mouseHoverCallback","isAutocompleteSuggestion","isSelectedResult","activeSuggestion","SearchRowRef","push","scrollIntoView","behavior","block","join","name","ref","onMouseEnter","SIGNATURE","TRANSFORMATION","NODE","calculateTextWidth","text","document","createElement","style","visibility","whiteSpace","position","padding","textContent","body","appendChild","width","offsetWidth","removeChild","SearchInputComponent","searchInputRef","onChange","onKeyDown","inputWidth","awaitingInput","awaitingInputState","userInput","searchInputState","searchResultHighlights","useEffect","placeholder","PulseLoader","loading","cssOverride","marginRight","size","speedMultiplier","awaitingInputSpinnerSpeed","some","s","isAutocomplete","Search","_useRecoilState2","_slicedToArray","useRecoilState","_useRecoilState4","searchInput","setSearchInput","useRef","minSearchInputWidthInEm","handleSearchResultSuggestions","useRecoilCallback","handleSearchResultSuggestionsCallback","_useRecoilState6","setSelectedSuggestion","currentSort","currentSortState","resetSelectedBranch","useResetRecoilState","searchResultSuggestion","inputWidthCalculated","suggestionsWidth","newWidth","reduce","maxWidth","suggestionWidth","Math","max","pixelToEm","min","maxSearchInputWidthInEm","e","currentTarget","keyCode","KEY_ENTER","KEY_UP","preventDefault","KEY_DOWN","ClearMarked","setSearchUserInput","recoilHighlightedSymbols","allHighlightedSymbolsState","clearHighlights","clearAllHighlightsCallback","in","timeout","mountOnEnter","unmountOnExit","Settings","Suspense","fallback"],"sourceRoot":""}